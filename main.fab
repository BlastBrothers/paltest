// palette tester program
// by Blast_Brothers 2025

// D-pad controls BG color. 
// Holding down A, B, or Start will allow control of the 3 other colors of palette line 0.
// Holding down Select will allow control of the emphasis bits.


data /rlz //compressed
    [] nt
        file(rlz, "nametable.nam")

//Addresses in nametable memory where we draw the palette index numbers
ct UU UBC_NT_ADDR = $218B
ct UU EMPH_NT_ADDR = $21AB
ct UU BG1_NT_ADDR = $2096
ct UU BG2_NT_ADDR = $21D6
ct UU BG3_NT_ADDR = $2316

vars /misc
    //local tracking of PPU emphasis
    U emphasis = %00000000

//update numbers that show palette indices
fn update_nt()
    {PPUMASK}(0) //have to turn off PPU output to write data!

    ppu_set_addr(UBC_NT_ADDR)
    {PPUDATA}(palette[PALETTE_UBC] >> 4) //Write 1st digit with top 4 bits of palette color
    //PPU address autoincrements, so no need to set that again
    {PPUDATA}(palette[PALETTE_UBC] & %00001111)  //Write 2nd digit with bottom 4 bits of color

    ppu_set_addr(BG1_NT_ADDR)
    {PPUDATA}(palette[PALETTE_BG] >> 4)
    {PPUDATA}(palette[PALETTE_BG] & %00001111)

    ppu_set_addr(BG2_NT_ADDR)
    {PPUDATA}(palette[PALETTE_BG+1] >> 4)
    {PPUDATA}(palette[PALETTE_BG+1] & %00001111)

    ppu_set_addr(BG3_NT_ADDR)
    {PPUDATA}(palette[PALETTE_BG+2] >> 4)
    {PPUDATA}(palette[PALETTE_BG+2] & %00001111)

    ppu_set_addr(EMPH_NT_ADDR)
    {PPUDATA}(emphasis >> 4)
    {PPUDATA}(emphasis & %00001111)

    {PPUMASK}(PPUMASK_BG_ON | emphasis | PPUMASK_NO_BG_CLIP) //Have to turn PPU on to see stuff!

fn inc_hue(U index)
    if palette[index] & %00001111 == $0F
        palette[index] -= $10
    palette[index] += $1

fn dec_hue(U index)
    if palette[index] & %00001111 == $00
            palette[index] += $10
    palette[index] -= $1

fn inc_bright(U index)
    if palette[index] >= $30
        return
    palette[index] += $10

fn dec_bright(U index)
    if palette[index] <= $0F
        return
    palette[index] -= $10

fn update_pal_entry(U index)
    if pads[0].pressed & BUTTON_LEFT
        dec_hue(index)
    else if pads[0].pressed & BUTTON_RIGHT
        inc_hue(index)
    else if pads[0].pressed & BUTTON_UP
        inc_bright(index)
    else if pads[0].pressed & BUTTON_DOWN
        dec_bright(index)

fn update_emphasis()
    if pads[0].pressed & BUTTON_LEFT
        emphasis ^= PPUMASK_EMPHASIZE_R
    else if pads[0].pressed & BUTTON_DOWN
        emphasis ^= PPUMASK_EMPHASIZE_G
    else if pads[0].pressed & BUTTON_RIGHT
        emphasis ^= PPUMASK_EMPHASIZE_B
    else if pads[0].pressed & BUTTON_UP
        emphasis ^= PPUMASK_GRAYSCALE
    
fn rotate_pal()
    U tmp = palette[PALETTE_UBC]
    palette[PALETTE_UBC] = palette[PALETTE_BG]
    palette[PALETTE_BG] = palette[PALETTE_BG+1]
    palette[PALETTE_BG+1] = palette[PALETTE_BG+2]
    palette[PALETTE_BG+2] = tmp

nmi tick()
    ppu_upload_palette()
    update_nt()
    ppu_set_addr($2000) //this is where our nametable is, so PPU will render from there
    poll_pads()


mode main()
: nmi tick //This will be our NMI function

    //initial pal setup
    palette[PALETTE_BG] = $12
    palette[PALETTE_BG+1] = $23
    palette[PALETTE_BG+2] = $34
    palette[PALETTE_BG+6] = $0F
    palette[PALETTE_BG+7] = $00
    palette[PALETTE_BG+8] = $20
    palette[PALETTE_UBC] = $01
    ppu_upload_palette()

    ppu_set_addr($2000) //This is where we want the nametable to be
    ppu_upload_rlz(@nt)


    {PPUMASK}(PPUMASK_BG_ON | emphasis | PPUMASK_NO_BG_CLIP)
    {PPUCTRL}(PPUCTRL_NMI_ON) //call our NMI func every frame, during blanking

    while true
        //If it can be done before NMI, do so.
        update_pads()

        if pads[0].held & BUTTON_SELECT
            if pads[0].pressed & BUTTON_START
                rotate_pal()
        else if pads[0].held & BUTTON_A
            update_pal_entry(PALETTE_BG)
        else if pads[0].held & BUTTON_B
            update_pal_entry(PALETTE_BG+1)
        else if pads[0].held & BUTTON_START
            update_pal_entry(PALETTE_BG+2)
        else if pads[0].held & BUTTON_SELECT
            update_emphasis()
        else
            update_pal_entry(PALETTE_UBC)
        nmi

chrrom
    file(fmt, "tileset.png")